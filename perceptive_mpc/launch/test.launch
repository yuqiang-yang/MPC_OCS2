<?xml version="1.0" encoding="utf-8"?>
<launch>
   <!-- run rviz-->
    <arg name="rviz"                default="true" />
    <!--     Name of the task file which defines the mpc problem settings-->

    <arg name="mpc_task_file"       default="task.info"/>
    <!-- Set rviz configuration -->
    <arg name="rvizconfig"          default="$(find perceptive_mpc)/config/demo.rviz"/>

    <arg name="tsdf_voxel_size" value="0.1"/>

    <arg name="tsdf_voxels_per_side" value="16"/>

    <arg name="isPureSimulation" value="true"/>
    <!-- Load robot description -->                                               
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mue_description)/urdf/mue.urdf.xacro'"/>
    <include file="$(find realsense2_camera)/launch/demo_pointcloud.launch" />

    <node name="robot_state_publisher2" pkg="robot_state_publisher" type="robot_state_publisher">
        <param name="publish_frequency" value="100"/>
    </node>
    <node name="mue_receive_and_control" pkg="wholebody_control" type="fakePublisher.py" output="screen" if ="$(eval arg('isPureSimulation') == false)">
        <param name="ur_ip"           value="192.168.100.2"/>
        <param name="ur_control_activate"   value="false"/>
    </node>
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(arg rvizconfig)" output="screen" if="$(arg rviz)"/>
     <node pkg="perceptive_mpc" name="kinematic_simulation" type="perceptive_mpc_kinematic_simulation" output="screen"> 
      <param name="mpc_task_file"           value="$(arg mpc_task_file)"/>
      <rosparam file="$(find perceptive_mpc)/config/kinematic_simulation_parameters.yaml"/>
      <rosparam file="$(find perceptive_mpc)/config/voxblox.yaml"/>
      <param name="info_rate" value="8.0" />
      <remap from="/kinematic_simulation/esdf_map_in" to="esdf_map" />
        <param name="tsdf_voxel_size" value="$(arg tsdf_voxel_size)" />
        <param name="tsdf_voxels_per_side" value="$(arg tsdf_voxels_per_side)"/>
        <param name="world_frame" value="odom" />
        <param name="update_mesh_every_n_sec" value="0.0" />
        <param name="publish_map_every_n_sec" value="0.0"/>
        <param name="publish_esdf_map" value="false" />
        <param name="publish_slices" value="false" />
        <param name="publish_pointclouds" value="false" />
        <param name="use_tf_transforms" value="false" />
        <param name="verbose" value="true" />

        <param name="isPureSimulation" value ="$(arg isPureSimulation)"/>
    </node> 
    <!-- <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="" clear_params="true">
        <remap from="pointcloud" to="/camera/depth/color/points"/>  
        <remap from="voxblox_node/esdf_map_out" to="esdf_map" />
        <param name="publish_esdf_map" value="true" />
        <param name="publish_slices" value="true" />
        <param name="publish_pointclouds" value="true" />
        <param name="use_tf_transforms" value="true" />
        <remap from="transform" to="/perceptive_mpc/odomToCamera" />
        <param name="verbose" value="false" />
        <param name="slice_level" value="0.8" />
        <param name="clear_sphere_for_planning" value="true" />
        <param name="clear_sphere_radius" value="0.5" /> 
        <param name="occupied_sphere_radius" value="3" /> 
        <param name="clear_sphere_for_planning" value="true" /> 
        <param name="method" value="fast" />
        <param name="world_frame" value="odom" />
        <param name="pointcloud_queue_size" value="3" />
        <param name="tsdf_voxel_size" value="$(arg tsdf_voxel_size)" />
        <param name="tsdf_voxels_per_side" value="$(arg tsdf_voxels_per_side)"/>
        <param name="publish_map_every_n_sec" value="1"/>
        <param name="update_mesh_every_n_sec" value="1" />
        <rosparam file="$(find perceptive_mpc)/config/voxblox.yaml"/>
    </node> -->
    <node name="interactive_pose_node" pkg="perceptive_mpc" type="interactive_marker.py" output="screen"/>
    <!-- <include file="$(find robot_body_filter)/examples/body_filter_node.launch" /> -->
    
    <!-- only used when the mobile base is broken -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="mobile_base_tf_publisher" args="0 0 0 0 0 0 1 odom base_link 100" if ="$(eval arg('isPureSimulation') == false)"/> -->

    <group ns="pointcloud_filter">
        <node pkg="nodelet" type="nodelet" name="pointcloud_filter_chain"  args="manager"/>
        <node name="voxel_grid_filter" pkg="nodelet" type="nodelet" args="load pcl/VoxelGrid pointcloud_filter_chain">
            <remap from="~input" to="/camera/depth/color/points" />
            <remap from="~output" to="downsample_pointcloud" />
            <rosparam subst_value="true">
                filter_field_name: 'z'
                filter_limit_min: 0.0
                filter_limit_max: 2.0
                leaf_size: 0.02
            </rosparam>
        </node>

        <node name="statisticalOutlier_filter" pkg="nodelet" type="nodelet" args="load pcl/StatisticalOutlierRemoval pointcloud_filter_chain">
            <remap from="~input" to="downsample_pointcloud" />
            <remap from="~output" to="outlier_filtered_pointcloud" />
            <rosparam>
                mean_k: 20
                stddev: 0.7
            </rosparam>
        </node>

        <node name="robot_body_filter" pkg="nodelet" type="nodelet" args="load sensor_filters/pointcloud2_filter_chain pointcloud_filter_chain">
            <rosparam file="$(find perceptive_mpc)/config/tradr_realsense_l515.yaml"/>
            <remap from="~input" to= "outlier_filtered_pointcloud" />
            <remap from="~output" to="pointcloud_filtered" />            
        </node>

  </group>

        <node pkg="fiesta" type="test_fiesta" name="fiesta" output="log"  >

            <param name="resolution" value="0.02"/>
            <param name="update_esdf_every_n_sec" value="0.1"/>

            <!--Hash Table only-->
            <param name="reserved_size" value="1000000"/>

            <!--Array only-->
            <param name="lx" value="-2.5"/>
            <param name="ly" value="-2.5"/>
            <param name="lz" value="-0.5"/>
            <param name="rx" value="+2.5"/>
            <param name="ry" value="+2.5"/>
            <param name="rz" value="+2"/>
            <!-- raycasting parameters -->
            <param name="min_ray_length" value="0.5"/>
            <param name="max_ray_length" value="3.0"/>
            <!--If hash table is used, make sure the value is 0. In array implementation, 0 means no other thread.-->
            <param name="ray_cast_num_thread" value="0"/>

            <!-- probabilistic grid map -->
            <param name="p_hit" value="0.70"/>
            <param name="p_miss" value="0.35"/>
            <param name="p_min" value="0.12"/>
            <param name="p_max" value="0.97"/>
            <param name="p_occ" value="0.80"/>

            <!-- global / local -->
            <param name="global_map" value="true"/>
            <param name="global_update" value="true"/>
            <param name="global_vis" value="true"/>
            <param name="radius_x" value="3.0"/>
            <param name="radius_y" value="3.0"/>
            <param name="radius_z" value="1.5"/>

            <!--depth_filter only depth image-->
            <param name="use_depth_filter" value="true"/>

            <!-- visulization -->
            <!--0 for no visulize-->
            <param name="visualize_every_n_updates" value="5"/>
            <param name="slice_vis_max_dist" value="2.0"/>
            <!-- relative to the lz if array is used, relative to the origin if hash table is used -->
            <param name="slice_vis_level" value="1.3"/>
            <param name="vis_lower_bound" value="0"/>
            <param name="vis_upper_bound" value="+10"/>

            <!-- subsribe source -->
            <remap from="~depth" to="/pointcloud_filter/pointcloud_filtered"/>
            <remap from="~transform" to="/perceptive_mpc/odomToCamera"/>
        </node>

</launch>